// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Cnx.Shared.DAL.Models
{
    using Newtonsoft.Json;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeEntityDB : IEntityDB
    {
        public System.Data.Entity.DbSet<Axis> Axes { get; set; }
        public System.Data.Entity.DbSet<AxisList> AxisLists { get; set; }
        public System.Data.Entity.DbSet<Choice> Choices { get; set; }
        public System.Data.Entity.DbSet<Demographic> Demographics { get; set; }
        public System.Data.Entity.DbSet<Inquiry> Inquiries { get; set; }
        public System.Data.Entity.DbSet<Member> Members { get; set; }
        public System.Data.Entity.DbSet<Participant> Participants { get; set; }
        public System.Data.Entity.DbSet<Result> Results { get; set; }
        public System.Data.Entity.DbSet<ScaleEntry> ScaleEntries { get; set; }
        public System.Data.Entity.DbSet<ScaleList> ScaleLists { get; set; }
        public System.Data.Entity.DbSet<Topic> Topics { get; set; }
        public System.Data.Entity.DbSet<TopicList> TopicLists { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<Vote> Votes { get; set; }

        public FakeEntityDB()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            Axes = new FakeDbSet<Axis>("Id");
            AxisLists = new FakeDbSet<AxisList>("Id");
            Choices = new FakeDbSet<Choice>("Id");
            Demographics = new FakeDbSet<Demographic>("Id");
            Inquiries = new FakeDbSet<Inquiry>("Id");
            Members = new FakeDbSet<Member>("Id");
            Participants = new FakeDbSet<Participant>("Id");
            Results = new FakeDbSet<Result>("Id");
            ScaleEntries = new FakeDbSet<ScaleEntry>("Id");
            ScaleLists = new FakeDbSet<ScaleList>("Id");
            Topics = new FakeDbSet<Topic>("Id");
            TopicLists = new FakeDbSet<TopicList>("Id");
            Users = new FakeDbSet<User>("Id");
            Votes = new FakeDbSet<Vote>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
